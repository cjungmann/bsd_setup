#!/usr/bin/env bash

declare T_UP_ARROW=$'\e[A'
declare T_TAB=$'\t'

declare T_DOWN_ARROW=$'\e[B'
declare T_SHIFT_TAB=$'\e[Z'

shopt -s extglob

declare TGROUP_UP=$'\e\\[A|\e\\[Z' # Up-arrow, shift-tab
declare TKEYS_UP="Up-arrow|Shift-Tab"
declare TGROUP_DOWN=$'\e\\[B|\t|\n'  # Down-arrow, tab, Enter
declare TKEYS_DOWN="Down-arrow|Tab|Enter"

declare TGROUP_TOGGLE=$' '
declare TGROUP_EXEC=$'x'
declare TGROUP_QUIT=$'q'
declare TGROUP_HELP=$'\\?'

declare T_INTRO=""
declare T_PROMPT="'?' for help, 'x' to execute, 'q' to quit"


reset_screen() { echo -n "[2J[1;1H"; }

# Waits for and returns single keypress, even if it is
# represented by multiple characters.
get_keypress()
{
    local -n charlist="$1"
    charlist=

    local IFS=''

    read  -srN1
    charlist="$REPLY"

    while read -t 0; do
        read -srN1
        charlist="${charlist[@]}$REPLY"
    done
}

toggler_show_key()
{
    local key="$1"
    if [ "$key" == " " ]; then
        echo -n "SPACE"
    elif [ "${#key}" -eq 1 ]; then
        echo -n "'$key' key"
    else
        echo -n "$key"
    fi
}

toggler_split_group()
{
    local -n keynames="TKEYS_$1"
    local -n keygroup="TGROUP_$1"

    local -a keylist

    IFS=$'|'

    if [ "$keynames" ]; then
        keylist=( $keynames )
    else
        keylist=( $keygroup )
    fi

    if [ "${#keylist[@]}" -gt 0 ]; then
        toggler_show_key "${keylist[0]}"
        for key in "${keylist[@]:1}"; do
            echo -n ", "
            toggler_show_key "$key"
        done
        echo
    fi
}

toggler_generate_help()
{
    reset_screen
    echo "Use the following keys to navigate this dialog:"
    echo
    echo -n "Previous entry keys: "
    toggler_split_group "UP"
    echo -n "    Next entry keys: "
    toggler_split_group "DOWN"
    echo -n "        Toggle keys: "
    toggler_split_group "TOGGLE"
    echo -n "  Key(s) to execute: "
    toggler_split_group "EXEC"
    echo -n "     Key(s} to quit: "
    toggler_split_group "QUIT"
    echo
    echo -n "Type any key to continue"

    read -n1
}

# Print a single choice, called by function toggler_print_choices()
#
# A new implementation will likely need to change or replace this
# function to generate options according to the new need.
toggler_print_choice()
{
    local key="$1"
    local -i value="$2" hilite="$3"
    local prefix
    if [ "$hilite" -ne 0 ]; then
        echo -n "[43m"
    fi
    
    if [ "$value" -eq 0 ]; then
        prefix="[31;1mNOT selected"
    else
        prefix="[32;1mSelected"
    fi
    echo "$prefix $key[m"
}

# Prints all options, using the keys array for order and the choices
# associative array for the values.
toggler_print_choices()
{
    local keys_name="$1"
    local choices_name="$2"
    local -n keys="$keys_name"
    local -n choices="$choices_name"
    local -i selected="$3"
    local key
    local -i count=0 hilite

    for key in "${keys[@]}"; do
        if [ "$(( count++ ))" -eq "$selected" ]; then
            hilite=1
        else
            hilite=0
        fi
        toggler_print_choice "$key" "${choices[$key]}" "$hilite"
    done
    
}

# Toggles the specified value
toggler_switch_choice()
{
    local -n keys="$1"
    local -n choices="$2"
    local -i ndx="$3"

    local key="${keys[$ndx]}"

    choices[$key]=$(( (${choices[$key]} + 1) % 2 ))
}

#####################################################################################
# Create a arrow-key navigated list of switches to collect user input.
# Arguments:
#    $1 (array):             name of array of strings to be used as keys
#    $2 (associative array): name of associative array in which user
#                            responses will be stored.  Typically, the calling
#                            function will reference an empty array which will
#                            be initialized and filled in this function (toggler()).
#
# The result of this function will be found in the instance of the associative
# array whose name was passed as the second argument in the call to this function.
#####################################################################################
toggler()
{
    local list_name="$1"
    local result_name="$2"
    
    local -n keys="$list_name"
    local -n choices="$result_name"

    local -i limit=$(( "${#keys[@]}" - 1 ))
    local -i hilite=0
    local keyp

    while [ 1 -eq 1 ]; do
        reset_screen
        if [ "$T_INTRO" ]; then echo "$T_INTRO"; fi
        toggler_print_choices $list_name $result_name $hilite
        if [ "$T_PROMPT" ]; then echo; echo -n "$T_PROMPT"; fi

        get_keypress keyp
        case "$keyp" in
            +($TGROUP_HELP) ) toggler_generate_help ;;
                
            +($TGROUP_UP) )
                if [ "$hilite" -gt 0 ]; then
                    hilite=$(( hilite - 1 ))
                fi
                ;;
            +($TGROUP_DOWN) )
                if [ "$hilite" -lt "$limit" ]; then
                    hilite=$(( hilite + 1 ))
                fi
                ;;
            
            +($TGROUP_TOGGLE) )
                toggler_switch_choice "$list_name" "$result_name" $hilite
                ;;
            +($TGROUP_QUIT) ) return 1 ;;
            +($TGROUP_EXEC) ) echo; return 0 ;;
        esac
    done
}

